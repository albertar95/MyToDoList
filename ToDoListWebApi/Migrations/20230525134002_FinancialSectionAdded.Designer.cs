// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToDoListWebApi.Models;

#nullable disable

namespace ToDoListWebApi.Migrations
{
    [DbContext(typeof(ToDoListDbContext))]
    [Migration("20230525134002_FinancialSectionAdded")]
    partial class FinancialSectionAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("ToDoListWebApi.Models.Account", b =>
                {
                    b.Property<Guid>("NidAccount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<decimal>("LendAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("NidAccount");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Goal", b =>
                {
                    b.Property<Guid>("NidGoal")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<byte>("GoalStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("NidGoal");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Note", b =>
                {
                    b.Property<Guid>("NidNote")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("NidNote");

                    b.HasIndex("GroupId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.NoteGroup", b =>
                {
                    b.Property<Guid>("NidGroup")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("NidGroup");

                    b.HasIndex("UserId");

                    b.ToTable("NoteGroups");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Progress", b =>
                {
                    b.Property<Guid>("NidProgress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<short>("ProgressTime")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("NidProgress");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Routine", b =>
                {
                    b.Property<Guid>("NidRoutine")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RepeatDays")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<byte>("RepeatType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Todate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("NidRoutine");

                    b.HasIndex("UserId");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.RoutineProgress", b =>
                {
                    b.Property<Guid>("NidRoutineProgress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ProgressDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoutineId")
                        .HasColumnType("TEXT");

                    b.HasKey("NidRoutineProgress");

                    b.HasIndex("RoutineId");

                    b.ToTable("RoutineProgresses");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Schedule", b =>
                {
                    b.Property<Guid>("NidSchedule")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("date");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("TEXT");

                    b.HasKey("NidSchedule");

                    b.HasIndex("TaskId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Task", b =>
                {
                    b.Property<Guid>("NidTask")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ClosureDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("TaskStatus")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TaskWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("NidTask");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Transaction", b =>
                {
                    b.Property<Guid>("NidTransaction")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("PayerAccount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RecieverAccount")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte>("TransactionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("NidTransaction");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.User", b =>
                {
                    b.Property<Guid>("NidUser")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("NidUser");

                    b.HasIndex(new[] { "Username" }, "IX_Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Goal", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Goals_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Note", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.NoteGroup", "Group")
                        .WithMany("Notes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_Notes_NoteGroups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.NoteGroup", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.User", "User")
                        .WithMany("NoteGroups")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_NoteGroups_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Progress", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.Schedule", "Schedule")
                        .WithMany("Progresses")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Progresses_Schedules");

                    b.HasOne("ToDoListWebApi.Models.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Progresses_Users");

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Routine", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.User", "User")
                        .WithMany("Routines")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Routines_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.RoutineProgress", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.Routine", "Routine")
                        .WithMany("RoutineProgresses")
                        .HasForeignKey("RoutineId")
                        .IsRequired()
                        .HasConstraintName("FK_RoutineProgresses_Routines");

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Schedule", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.Task", "Task")
                        .WithMany("Schedules")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Tasks");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Task", b =>
                {
                    b.HasOne("ToDoListWebApi.Models.Goal", "Goal")
                        .WithMany("Tasks")
                        .HasForeignKey("GoalId")
                        .IsRequired()
                        .HasConstraintName("FK_Goals_Tasks");

                    b.HasOne("ToDoListWebApi.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Users");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Goal", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.NoteGroup", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Routine", b =>
                {
                    b.Navigation("RoutineProgresses");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Schedule", b =>
                {
                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.Task", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ToDoListWebApi.Models.User", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("NoteGroups");

                    b.Navigation("Progresses");

                    b.Navigation("Routines");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
